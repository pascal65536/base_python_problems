
import base64

def js_to_b64(js_code: str) -> str:
    """–ö–æ–¥–∏—Ä—É–µ—Ç JS-—Å—Ç—Ä–æ–∫—É –≤ base64"""
    return base64.b64encode(js_code.encode('utf-8')).decode('utf-8')

def b64_to_js(b64_str: str) -> str:
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ JS (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    return base64.b64decode(b64_str.encode('utf-8')).decode('utf-8')

def generate_level(decoded_payload: str, method: str = 'script_text') -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å ‚Äî –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç payload –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ"""
    if method == 'script_text':
        # –°–æ–∑–¥–∞—ë—Ç <script> —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏
        return f'''(function() {{
    const payload = "{decoded_payload}";
    const decoded = atob(payload);
    const script = document.createElement('script');
    script.textContent = decoded;
    document.head.appendChild(script);
}})();'''

    elif method == 'blob':
        # –°–æ–∑–¥–∞—ë—Ç Blob –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç —á–µ—Ä–µ–∑ URL.createObjectURL
        return f'''(function() {{
    const payload = "{decoded_payload}";
    const decoded = atob(payload);
    const blob = new Blob([decoded], {{ type: 'text/javascript' }});
    const url = URL.createObjectURL(blob);
    const script = document.createElement('script');
    script.src = url;
    document.head.appendChild(script);
}})();'''

def generate_chain(final_code: str, levels: int = 3, method: str = 'script_text') -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É –∏–∑ `levels` —É—Ä–æ–≤–Ω–µ–π.
    –ö–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å ‚Äî base64-–∫–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π JS-–∫–æ–¥ (—É—Ä–æ–≤–µ–Ω—å 1).
    """
    if levels < 1:
        raise ValueError("–£—Ä–æ–≤–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1")

    # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    current_code = final_code

    # –°–æ–±–∏—Ä–∞–µ–º —Ü–µ–ø–æ—á–∫—É —Å –∫–æ–Ω—Ü–∞: –æ—Ç —Ñ–∏–Ω–∞–ª–∞ –∫ —Å—Ç–∞—Ä—Ç—É
    for i in range(levels):
        # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–¥ –≤ base64
        b64 = js_to_b64(current_code)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —É—Ä–æ–≤–Ω—è, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—Ç—å
        current_code = generate_level(b64, method)

    # –ü–æ—Å–ª–µ —Ü–∏–∫–ª–∞ current_code ‚Äî —ç—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π) —É—Ä–æ–≤–µ–Ω—å
    return current_code

# ========================
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ========================

if __name__ == "__main__":
    FINAL_CODE = 'alert("HelloWorld");'
    # FINAL_CODE = 'console.log("HelloWorld");'
    LEVELS = 10
    METHOD = 'script_text'  # –∏–ª–∏ 'blob'

    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ —Å–∞–º–æ—Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏...\n")

    start_code = generate_chain(FINAL_CODE, LEVELS, METHOD)

    print("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–π JS-–∫–æ–¥ (—É—Ä–æ–≤–µ–Ω—å 1):\n")
    print(start_code)
    exit()

    print(f"\nüì¶ –†–∞–∑–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∞: {len(start_code)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    print("\nüîç –û—Ç–ª–∞–¥–∫–∞: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–≤–Ω–µ–π (–ø–æ—Å–ª–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏)")

    temp_code = start_code
    for lvl in range(1, LEVELS + 1):
        print(f"\n--- –£—Ä–æ–≤–µ–Ω—å {lvl} ---")
        # –ò–∑–≤–ª–µ–∫–∞–µ–º base64 —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É `payload = "` –∏ `";`
        try:
            start_idx = temp_code.index('payload = "') + len('payload = "')
            end_idx = temp_code.index('";', start_idx)
            b64_payload = temp_code[start_idx:end_idx]
            decoded = b64_to_js(b64_payload)
            print(decoded)
            temp_code = decoded
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —É—Ä–æ–≤–Ω—è {lvl}: {e}")
            break

    print(f"\nüèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (—É—Ä–æ–≤–µ–Ω—å {LEVELS + 1}):")
    print(temp_code)